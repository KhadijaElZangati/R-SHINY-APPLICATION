"Marrakech-Safi" = 13,
"Drâa-Tafilalet" = 15,
"Souss-Massa" = 17,
"Guelmim-Oued Noun" = 19,
"Laâyoune-Sakia El Hamra" = 21,
"Dakhla-Oued Ed Dahab" = 23)
# Convert values in "Région" column to numbers
ClusDf$Région_12 <- recode(ClusDf$Région_12, !!!region_mapping)
# Show the updated dataset
print(ClusDf)
library(dplyr)
# Define the mapping
region_mapping <- c("Tanger-Tétouan-Al-Hoceïma" = 1,
"Oriental" = 2,
"Fès-Meknès" = 3,
"Rabat-Salé-Kénitra" = 4,
"Béni Mellal-Khénifra" = 5,
"Casablanca-Settat" = 6,
"Marrakech-Safi" = 7,
"Drâa-Tafilalet" = 8,
"Souss-Massa" = 9,
"Guelmim-Oued Noun" = 10,
"Laâyoune-Sakia El Hamra" = 11,
"Dakhla-Oued Ed Dahab" = 12)
# Convert values in "Région" column to numbers
ClusDf$Région_12 <- recode(ClusDf$Région_12, !!!region_mapping)
# Show the updated dataset
print(ClusDf)
library(dplyr)
# Define the mapping
region_mapping <- c("Tanger-Tétouan-Al-Hoceïma" = 1,
"Oriental" = 2,
"Fès-Meknès" = 3,
"Rabat-Salé-Kénitra" = 4,
"Béni Mellal-Khénifra" = 5,
"Casablanca-Settat" = 6,
"Marrakech-Safi" = 7,
"Drâa-Tafilalet" = 8,
"Souss-Massa" = 9,
"Guelmim-Oued Noun" = 10,
"Laâyoune-Sakia El Hamra" = 11,
"Dakhla-Oued Ed Dahab" = 12)
# Convert values in "Région" column to numbers
ClusDf$Région_12 <- recode(ClusDf$Région_12, !!!region_mapping)
# Show the updated dataset
print(ClusDf)
ClusDf$DAM <-ClusDf$DAM*ClusDf$Taille_mÃ.nage
ClusDf
ClusDf <- read.csv(file = "C:\\Users\\hp\\Desktop\\stage hcp\\clustering dataset.csv")
ClusDf
ClusDf$DAM <-ClusDf$DAM*ClusDf$Taille_mÃ.nage
ClusDf
library(dplyr)
# Define the mapping
region_mapping <- c("Tanger-Tétouan-Al-Hoceïma" = 1,
"Oriental" = 2,
"Fès-Meknès" = 3,
"Rabat-Salé-Kénitra" = 4,
"Béni Mellal-Khénifra" = 5,
"Casablanca-Settat" = 6,
"Marrakech-Safi" = 7,
"Drâa-Tafilalet" = 8,
"Souss-Massa" = 9,
"Guelmim-Oued Noun" = 10,
"Laâyoune-Sakia El Hamra" = 11,
"Dakhla-Oued Ed Dahab" = 2)
# Convert values in "Région" column to numbers
ClusDf$Région_12 <- recode(ClusDf$Région_12, !!!region_mapping)
ClusDf <- read.csv(file = "C:\\Users\\hp\\Desktop\\stage hcp\\clustering dataset.csv")
ClusDf
ClusDf$DAM <-ClusDf$DAM*ClusDf$Taille_mÃ.nage
ClusDf
library(dplyr)
# Define the mapping
region_mapping <- c("Tanger-Tétouan-Al-Hoceïma" = 1,
"Oriental" = 2,
"Fès-Meknès" = 3,
"Rabat-Salé-Kénitra" = 4,
"Béni Mellal-Khénifra" = 5,
"Casablanca-Settat" = 6,
"Marrakech-Safi" = 7,
"Drâa-Tafilalet" = 8,
"Souss-Massa" = 9,
"Guelmim-Oued Noun" = 10,
"Laâyoune-Sakia El Hamra" = 11,
"Dakhla-Oued Ed Dahab" = 12)
# Convert values in "Région" column to numbers
ClusDf$RÃ.gion_12 <- recode(ClusDf$RÃ.gion_12, !!!region_mapping)
# Show the updated dataset
print(ClusDf)
ClusDf <- read.csv(file = "C:\\Users\\hp\\Desktop\\stage hcp\\clustering dataset.csv")
ClusDf
# Install and load the readxl package if you haven't already
install.packages("readxl")
library(readxl)
# Replace 'your_excel_file.xlsx' with the path to your Excel file
excel_data <- read_excel("C:\\Users\\hp\\Desktop\\stage hcp\\clustering dataset.xlsx")
# Replace 'your_csv_file.csv' with the desired name for your CSV file
write.csv(excel_data, "Clusdf.csv", row.names = FALSE)
excel_data <- read.csv("C:\\Users\\hp\\Desktop\\stage hcp\\Clusdf.csv")
excel_data <- read.csv("C:\\Users\\hp\\Desktop\\stage hcp\\Clusdf.csv")
Clusdf <- read.csv("C:\\Users\\hp\\Desktop\\stage hcp\\Clusdf.csv")
Clusdf
library(dplyr)
# Define the mapping
region_mapping <- c("Tanger-Tétouan-Al-Hoceïma" = 1,
"Oriental" = 3,
"Fès-Meknès" = 5,
"Rabat-Salé-Kénitra" = 7,
"Béni Mellal-Khénifra" = 9,
"Casablanca-Settat" = 11,
"Marrakech-Safi" = 13,
"Drâa-Tafilalet" = 15,
"Souss-Massa" = 17,
"Guelmim-Oued Noun" = 19,
"Laâyoune-Sakia El Hamra" = 21,
"Dakhla-Oued Ed Dahab" = 23)
# Convert values in "Région" column to numbers
Clus <- recode(Clusdf$Région_12, !!!region_mapping)
Clusdf <- read.csv("C:\\Users\\hp\\Desktop\\stage hcp\\Clusdf.csv")
Clusdf
library(dplyr)
# Define the mapping
region_mapping <- c("Tanger-TÃƒÂ©touan-Al HoceÃƒÂ¯ma" = 1,
"Oriental" = 3,
" FÃƒÂ¨s-MeknÃƒÂ¨s" = 5,
"	Rabat-SalÃ©-KÃ©nitra" = 7,
"BÃ©ni Mellal-KhÃ©nifra" = 9,
"Casablanca-Settat" = 11,
"Marrakech-Safi" = 13,
"DrÃ¢a-Tafilalet" = 15,
"Souss-Massa" = 17,
"Guelmim-Oued Noun" = 19,
"	LaÃ¢youne-Sakia El Hamra" = 21,
"Dakhla-Oued Ed Dahab" = 23)
# Convert values in "Région" column to numbers
Clus <- recode(Clusdf$RÃ.gion_12, !!!region_mapping)
# Show the updated dataset
print(Clus)
Clusdf <- read.csv("C:\\Users\\hp\\Desktop\\stage hcp\\mydataClustering.csv")
Clusdf
library(dplyr)
region_mapping <- c("Tanger-Tétouan-Al-Hoceïma" = 1,
"Oriental" = 2,
"Fès-Meknès" = 3,
"Rabat-Salé-Kénitra" = 4,
"Béni Mellal-Khénifra" = 5,
"Casablanca-Settat" = 6,
"Marrakech-Safi" = 7,
"Drâa-Tafilalet" = 8,
"Souss-Massa" = 9,
"Guelmim-Oued Noun" = 10,
"Laâyoune-Sakia El Hamra" = 11,
"Dakhla-Oued Ed Dahab" = 12)
#mapping dyl les valeur l  numbers
Clusdf$Région_12 <- recode(Clusdf$Région_12, !!!region_mapping)
print(Clusdf)
milieu_mapping <- c("Urbain" = 1, "Rural" = 2)
Clusdf$Région_12 <- recode(Clusdf$Milieu, !!!milieu_mapping)
print(Clusdf)
library(dplyr)
region_mapping <- c("Tanger-Tétouan-Al-Hoceïma" = 1,
"Oriental" = 2,
"Fès-Meknès" = 3,
"Rabat-Salé-Kénitra" = 4,
"Béni Mellal-Khénifra" = 5,
"Casablanca-Settat" = 6,
"Marrakech-Safi" = 7,
"Drâa-Tafilalet" = 8,
"Souss-Massa" = 9,
"Guelmim-Oued Noun" = 10,
"Laâyoune-Sakia El Hamra" = 11,
"Dakhla-Oued Ed Dahab" = 12)
#mapping dyl les valeur l  numbers
Clusdf$Région_12 <- recode(Clusdf$Région_12, !!!region_mapping)
print(Clusdf)
Clusdf <- read.csv("C:\\Users\\hp\\Desktop\\stage hcp\\mydataClustering.csv")
Clusdf
library(dplyr)
region_mapping <- c("Tanger-Tétouan-Al-Hoceïma" = 1,
"Oriental" = 2,
"Fès-Meknès" = 3,
"Rabat-Salé-Kénitra" = 4,
"Béni Mellal-Khénifra" = 5,
"Casablanca-Settat" = 6,
"Marrakech-Safi" = 7,
"Drâa-Tafilalet" = 8,
"Souss-Massa" = 9,
"Guelmim-Oued Noun" = 10,
"Laâyoune-Sakia El Hamra" = 11,
"Dakhla-Oued Ed Dahab" = 12)
#mapping dyl les valeur l  numbers
Clusdf$Région_12 <- recode(Clusdf$Région_12, !!!region_mapping)
print(Clusdf)
milieu_mapping <- c("Urbain" = 1, "Rural" = 2)
Clusdf$Milieu <- recode(Clusdf$Milieu, !!!milieu_mapping)
print(Clusdf)
# Save the combined dataset as a CSV file
write.csv(Clusdf, file = "Cluste_normalized.csv", row.names = FALSE)
# Download the CSV file innto my working directly
fileURL <- "Cluste_normalized.csv"
# cause there still only one region that didn't change the first one gived me NA value wch is "Tanger-Tétouan-Al-Hoceïma"  maybe I right it wrong there
Clusdf$Région_12[is.na(Clusdf$Région_12)] <- 1
Clusdf$DAM <-Clusdf$DAM/Clusdf$Taille_ménage
# Save the combined dataset as a CSV file
write.csv(Clusdf, file = "Cluste_normalized2.csv", row.names = FALSE)
# Download the CSV file innto my working directly
fileURL <- "Cluste_normalized2.csv"
# Load necessary libraries
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Convert the data into a dataframe
data <- data.frame(DAM = Clusdf$DAM)
# Perform K-means clustering with 3 clusters
kmeans_result <- kmeans(data, centers = 3)
# Extract cluster labels
labels <- kmeans_result$cluster
# Create a dataframe to store the data along with cluster labels
clustered_data <- cbind(data, Cluster = labels)
# Print the clustered data
print(clustered_data)
# Visualize the clusters
ggplot(clustered_data, aes(x = DAM, fill = factor(Cluster))) +
geom_histogram(binwidth = 5000) +
labs(x = "Yearly Consumption", y = "Count", title = "K-means Clustering of Families based on Yearly Consumption")
# Create a data frame with your data
data <- data.frame(
Milieu = c(1, 1, 1, 1, 1, 1),
Région_12 = c(12, 12, 12, 12, 12, 12),
Taille_ménage = c(2, 3, 3, 3, 4, 5),
DAM = c(39013.75, 15691.8, 20084.66667, 52412.33333, 72052.5, 27562.12)
)
# Perform K-means clustering
k <- 3  # Number of clusters
set.seed(123)  # For reproducibility
result <- kmeans(data, centers = k)
# Add cluster labels to the data frame
data$Cluster <- factor(result$cluster)
print(data)
# Create a data frame with your data
data <- data.frame(
Milieu = c(1, 1, 1, 1, 1, 1),
Région_12 = c(12, 12, 12, 12, 12, 12),
Taille_ménage = c(2, 3, 3, 3, 4, 5),
DAM = c(39013.75, 15691.8, 20084.66667, 52412.33333, 72052.5, 27562.12)
)
# Perform K-means clustering
k <- 3  # Number of clusters
set.seed(123)  # For reproducibility
result <- kmeans(data, centers = k)
# Add cluster labels to the data frame
data$Cluster <- factor(result$cluster)
print(data)
# Plotting libraries
library(ggplot2)
# Create a data frame with cluster assignments
cluster_data <- data.frame(data)
cluster_data$Cluster <- factor(cluster_data$Cluster)
# Plotting
ggplot(cluster_data, aes(x = Taille_ménage, y = DAM, color = Cluster)) +
geom_point() +
labs(title = "K-means Clustering",
x = "Taille_ménage",
y = "DAM") +
theme_minimal()
# Create a data frame with your data
data <- data.frame(
Milieu = c(1, 1, 1, 1, 1, 1),
Région_12 = c(12, 12, 12, 12, 12, 12),
Taille_ménage = c(2, 3, 3, 3, 4, 5),
DAM = c(39013.75, 15691.8, 20084.66667, 52412.33333, 72052.5, 27562.12)
)
# Perform K-means clustering
k <- 3  # Number of clusters
set.seed(123)  # For reproducibility
result <- kmeans(data, centers = k)
# Add cluster labels to the data frame
data$Cluster <- factor(result$cluster)
print(data)
# Plotting libraries
library(ggplot2)
# Create a data frame with cluster assignments
cluster_data <- data.frame(data)
cluster_data$Cluster <- factor(cluster_data$Cluster)
# Plotting
ggplot(cluster_data, aes(x = Taille_ménage, y = DAM, color = Cluster)) +
geom_point() +
labs(title = "K-means Clustering",
x = "Taille_ménage",
y = "DAM") +
theme_minimal()
# Plotting libraries
library(ggplot2)
# Create a data frame with cluster assignments
cluster_data <- data.frame(data)
cluster_data$Cluster <- factor(cluster_data$Cluster)
# Plotting
ggplot(data, aes(x = Taille_menage, y = DAM, color = Cluster)) +
geom_point() +
labs(title = "K-means Clustering",
x = "Taille_menage",
y = "DAM") +
theme_minimal()
# Plotting libraries
library(ggplot2)
# Create a data frame with cluster assignments
cluster_data <- data.frame(data)
cluster_data$Cluster <- factor(cluster_data$Cluster)
# Plotting
ggplot(data, aes(x = Taille_ménage, y = DAM, color = Cluster)) +
geom_point() +
labs(title = "K-means Clustering",
x = "Taille_menage",
y = "DAM") +
theme_minimal()
# Plotting libraries
library(ggplot2)
# Create a data frame with cluster assignments
cluster_data <- data.frame(data)
cluster_data$Cluster <- factor(cluster_data$Cluster)
# Plotting
ggplot(data44, aes(x = Taille_ménage, y = DAM, color = Cluster)) +
geom_point() +
labs(title = "K-means Clustering",
x = "Taille_menage",
y = "DAM") +
theme_minimal()
# Perform K-means clustering
k <- 3  # Number of clusters
set.seed(123)  # For reproducibility
result <- kmeans(Clusdf, centers = k)
# Add cluster labels to the data frame
data$Cluster <- factor(result$cluster)
# Save the combined dataset as a CSV file
write.csv(Clusdf, file = "Cluste_normalized2.csv", row.names = FALSE)
# Download the CSV file innto my working directly
fileURL <- "Cluste_normalized2.csv"
k <- 3  # Number of clusters
set.seed(123)  # For reproducibility
result <- kmeans(Clusdf, centers = k)
# Add cluster labels to the data frame
data$Cluster <- factor(result$cluster)
k <- 3  # Number of clusters
set.seed(123)  # For reproducibility
result <- kmeans(Clusdf, centers = k)
# Add cluster labels to the data frame
Clusdf$Cluster <- factor(result$cluster)
print(Clusdf)
shiny::runApp('C:/Users/hp/Desktop/stage hcp/test')
shiny::runApp('C:/Users/hp/Desktop/stage hcp/test')
shiny::runApp('C:/Users/hp/Desktop/stage hcp/test')
library(factoextra)
install.packages(factoextra)
library(factoextra)
install.packages("factoextra")
library(factoextra)
elbow <- fviz_nbclust(Clusdf, kmeans, method = "wss")
library(factoextra)
Clusdf<- read.csv(file = "C:\\Users\\hp\\Desktop\\stage hcp\\Cluste_normalized2.csv")
elbow <- fviz_nbclust(Clusdf, kmeans, method = "wss")
shiny::runApp('C:/Users/hp/Desktop/stage hcp/test')
shiny::runApp('C:/Users/hp/Desktop/stage hcp/test')
choose.files()
install.packages("arules")
library(arules)
transactions <- read.transactions(file = "C:\\Users\\hp\\Desktop\\stage hcp\\Cluste_normalized2.csv", sep = " ")
inspect(transactions)
fpgrowth_rules <- fpgrowth(transactions, support = 0.1, confidence = 0.5)
install.packages("arules")
install.packages("arules")
install.packages("arules")
install.packages("arules")
library(arules)
transactions <- read.transactions(file = "C:\\Users\\hp\\Desktop\\stage hcp\\Cluste_normalized2.csv", sep = " ")
inspect(transactions)
fpgrowth_rules <- fpgrowth(transactions, support = 0.1, confidence = 0.5)
install.packages("arules")
install.packages("arules")
install.packages("arules")
choose.files()
transactions<- read.csv( "C:\\Users\\hp\\Desktop\\stage hcp\\market_basket_analysis.csv")
library(arules)
transactions<- read.csv( "C:\\Users\\hp\\Desktop\\stage hcp\\market_basket_analysis.csv")
library(arules)
transactions<- read.csv( "C:\\Users\\hp\\Desktop\\stage hcp\\market_basket_analysis.csv")
library(arules)
transactions<- read.csv( "C:\\Users\\hp\\Desktop\\stage hcp\\market_basket_analysis.csv")
choose.files()
library(arules)
transactions <- read.transactions(file = "C:\\Users\\hp\\Desktop\\stage hcp\\market_basket_analysis.csv", sep = " ")
inspect(transactions)
apriori_rules <- apriori(transactions, parameter = list(support = 0.1, confidence = 0.5 , maxlen=4))
inspect(apriori_rules)
summary(apriori_rules)
library(arules)
transactions <- read.transactions(file = "C:\\Users\\hp\\Desktop\\stage hcp\\market_basket_analysis.csv", sep = " ")
inspect(transactions)
apriori_rules <- apriori(transactions, parameter = list(support = 0.1, confidence = 0.5 , maxlen=4))
inspect(apriori_rules)
print(apriori_rules)
library(arules)
# Read transaction data
transactions <- read.transactions(file = "C:\\Users\\hp\\Desktop\\stage hcp\\market_basket_analysis.csv", sep = " ")
# Mine association rules
apriori_rules <- apriori(transactions, parameter = list(support = 0.1, confidence = 0.5 , maxlen=4))
# Inspect the mined rules
inspect(apriori_rules)
# Summary of the mined rules
summary(apriori_rules)
library(arules)
# Read the CSV file with specified encoding
transactions <- read.csv("C:\\Users\\hp\\Desktop\\stage hcp\\market_basket_analysis.csv", fileEncoding = "UTF-8")
# Convert to transaction object
transactions <- as(transactions, "transactions")
# Run Apriori algorithm with adjusted parameters
rules <- apriori(transactions, parameter = list(support = 0.2, confidence = 0.6, maxlen = 4))
# Show the mined rules
inspect(rules)
shiny::runApp('C:/Users/hp/Desktop/stage hcp/test')
runApp('C:/Users/hp/Desktop/stage hcp/test')
runApp('C:/Users/hp/Desktop/stage hcp/test')
runApp('C:/Users/hp/Desktop/stage hcp/test')
runApp('C:/Users/hp/Desktop/stage hcp/test')
install.packages("plotly")
shiny::runApp('C:/Users/hp/Desktop/stage hcp/test')
shiny::runApp('C:/Users/hp/Desktop/stage hcp/test')
shiny::runApp('C:/Users/hp/Desktop/stage hcp/test')
shiny::runApp('C:/Users/hp/Desktop/stage hcp/test')
data <-read.csv("C:\\Users\\hp\\Desktop\\stage hcp\\mydataFormR.csv", header = T)
data
# before we build the model we need to calculate the mean consumption for each product in the 12 regions.
product_columns <- c(
"DAM_G01",
"DAM_G02",
"DAM_G03",
"DAM_G04",
"DAM_G05",
"DAM_G06",
"DAM_G07",
"DAM_G08",
"DAM_G09",
"DAM_G10",
"DAM_G11",
"DAM_G12",
"DAM_G13",
"DAM_G14",
"DAM_G15",
"DAM_G17",
"DAM_G18",
"DAM_G21",
"DAM_G22",
"DAM_G23",
"DAM_G24",
"DAM_G25",
"DAM_G26",
"DAM_G27",
"DAM_G28",
"DAM_G31",
"DAM_G32",
"DAM_G33",
"DAM_G34",
"DAM_G41",
"DAM_G42",
"DAM_G43",
"DAM_G44",
"DAM_G45",
"DAM_G46",
"DAM_G47",
"DAM_G51",
"DAM_G52",
"DAM_G53",
"DAM_G61",
"DAM_G62",
"DAM_G63",
"DAM_G71",
"DAM_G72",
"DAM_G73",
"DAM_G74",
"DAM_G75",
"DAM_G76",
"DAM_G77",
"DAM_G81",
"DAM_G82",
"DAM_G83",
"DAM_G84",
"DAM_G85",
"DAM_G86",
"DAM_G87",
"DAM_G88",
"DAM_G89",
"DAM_G91",
"DAM_G92",
"DAM_G93",
"DAM_G94",
"DAM_G95"
)
# Create a list of formulas to calculate mean consumption for each product
formulas <- lapply(product_columns, function(product) {
formula <- as.formula(paste(product, "~", "Région_12"))
formula
})
# Calculate mean consumption for each product in each region
means_by_region <- lapply(formulas, function(formula) {
aggregate(formula, data, mean)
})
# Print the mean consumption for each product in each region
for (i in seq_along(means_by_region)) {
cat("Mean consumption for", product_columns[i], "by region:\n")
print(means_by_region[[i]])
cat("\n") }
shiny::runApp('C:/Users/hp/Desktop/stage hcp/test')
